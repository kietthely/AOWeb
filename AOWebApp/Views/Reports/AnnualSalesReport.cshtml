@model SelectList;
@{
    ViewBag.Title = "Annual Sales";
}
<div class="bg-light py-2 mb-2">
    <h2 class="text-center">Annual Sales Report</h2>
</div>
<div class="row mb-3">
    <div class="col-2">
        <select name="year" asp-items="@Model" class="form-control year">
            <option selected value="">Select..</option>
        </select>
    </div> 
</div>
<div>
    <svg id="graph" width="100%" height="600px" class="border border-primary rounded p-2"></svg>
</div>
@section scripts{
<script type="module">
    import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";
    


    const svg = d3.select('svg');
    let w = svg.node().getBoundingClientRect().width;

    let h = svg.node().getBoundingClientRect().height;

    // change the margin of the chart
    const chartMargins = 
    {
        left: 40,
        right: 25,
        top: 25,
        bottom: 80
    }
    w = w - (chartMargins.left + chartMargins.right);
    h = h - (chartMargins.top + chartMargins.bottom);

    //fetch data
    document.querySelector('.row .col-2 [name="year"]').addEventListener("change", (event) => {
            let year = event.target.value;
            console.log("Year: " + event.target.value);
            if(year.length > 0 )
            {
                fetch(`/Reports/AnnualSalesReportData?year=${year}`)
                .then(response => {
                console.log("status" + response.status);
                console.log("text" + response.statusText);
                return response.json();
                })
                .then(data => buildGraph(data))
                .catch(error => console.log(error.message));
                    
                
            }
    })
        // building the graph
        function buildGraph(dataSet) {
            // get the range of items
            let totalItemsRange = d3.extent(dataSet, (d, i) => d.totalItems);
            let maxTotalItems = totalItemsRange[1];
         

            //dynamic scale
            let yScale = d3.scaleLinear().domain([0,maxTotalItems]).range([h,0]);

            let monthArray = Array.from(dataSet, (d,i) => d.monthName);
            console.log('Array: ' + monthArray);
            let xScale = d3.scaleBand().domain(monthArray).range([0,w]).paddingInner(0.1);
            console.log('xScale: ' + xScale('March'));
            // get all columns
            const chartGroup = svg.append('g').classed('chartGroup', true).attr('transform', `translate(${chartMargins.left}, ${chartMargins.top})`);
            let barGroups = chartGroup.selectAll('g').data(dataSet);

            // chart styling
            let newBarGroups = barGroups.enter()
                .append('g').attr('transform', (d, i) => {
                    return `translate(${xScale(d.monthName)}, ${yScale(d.totalItems)})`;
                });
            newBarGroups.append('rect').attr('x',0)
                .attr('height', (d, i) => { return h - yScale(d.totalItems); })
                .attr('width', xScale.bandwidth())
                .attr('fill', 'black');
            // texts inside the column
            newBarGroups.append('text').attr('text-anchor', 'middle')
            .attr('x', (d,i) => {return xScale.bandwidth()/ 2;})
            .attr('y', 40)
            .attr('fill', 'white')
            .style('font-size', '1em')
            .text((d,i) => d.totalItems.toLocaleString());

            // y axis
            let yAxis = d3.axisLeft(yScale);
            chartGroup.append('g').classed('axis y', true).call(yAxis);
            chartGroup
            .selectAll('text')
            .attr('transform', 'rotate(-70)')
            .attr('dx', '-0.8em')
            .attr('dy', '0.25em')
            .style('text-anchor','end')
            .style('font-size', '0.9em');
            // x axis
            let xAxis = d3.axisBottom(xScale);
            chartGroup.append('g').attr('transform',`translate(0,${h})`).classed('axis x', true).call(xAxis);
        }
    </script>
}
